{"ast":null,"code":"var _jsxFileName = \"/Users/konraddroeske/Desktop/HackerYouBootcamp/zoltarSpeaks/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport filterWish from './filterWish'; // import firebase from './firebase';\n\nimport './App.css';\nimport Maze from './Components/Maze';\nimport LandingPage from './Components/LandingPage'; // import Results from \"./Components/Results\";\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = userWish => {\n      const userInput = userWish;\n      const filteredWish = filterWish(userInput);\n      console.log(filteredWish); // turn this into an array\n\n      const wordArray = filteredWish.split(' '); // console.log(wordArray);\n      // take the first value of the array [0] and save it to state\n\n      const userKeyWord = wordArray[0];\n      console.log(userKeyWord); // run it through the API Call to get contextual advice\n\n      axios({\n        url: \"https://api.adviceslip.com/advice/search/\".concat(userKeyWord),\n        method: \"GET\",\n        dataResponse: \"json\"\n      }).then(answer => {\n        console.log(answer); // console.log(answer.data.message);\n\n        if (typeof answer.data.message === 'undefined') {\n          this.setState({\n            advice: [...this.state.advice, answer.data.slips[0].advice],\n            advice: answer.data.slips[0].advice\n          }, () => {\n            console.log(this.state.advice);\n          });\n        } else {\n          console.log(this.state.advice);\n        }\n      });\n    };\n\n    this.state = {\n      advice: [] // userWish: \"\",\n\n    };\n  }\n\n  componentDidMount() {\n    // on mount, make an API call, get a random piece of advice and store in state, just in case the user's keyword query doesn't return any result\n    axios({\n      url: \"https://api.adviceslip.com/advice\",\n      method: \"GET\",\n      dataResponse: \"json\"\n    }).then(answer => {\n      console.log(answer);\n      const randomAdvice = answer.data.slip.advice;\n      this.setState({\n        advice: randomAdvice\n      });\n    }).catch(() => {\n      console.log('error');\n    });\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: () => React.createElement(LandingPage, {\n        handleSubmit: this.handleSubmit,\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/maze\",\n      component: Maze,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/maze\",\n      component: Maze,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/konraddroeske/Desktop/HackerYouBootcamp/zoltarSpeaks/src/App.js"],"names":["React","Component","axios","filterWish","Maze","LandingPage","BrowserRouter","Router","Route","Link","App","constructor","handleSubmit","userWish","userInput","filteredWish","console","log","wordArray","split","userKeyWord","url","method","dataResponse","then","answer","data","message","setState","advice","state","slips","componentDidMount","randomAdvice","slip","catch","render","handleChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport filterWish from './filterWish';\n// import firebase from './firebase';\nimport './App.css';\nimport Maze from './Components/Maze';\nimport LandingPage from './Components/LandingPage';\n// import Results from \"./Components/Results\";\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tadvice: []\n\t\t\t// userWish: \"\",\n\t\t};\n\t}\n\n\thandleSubmit = userWish => {\n\t\tconst userInput = userWish;\n\n\t\tconst filteredWish = filterWish(userInput);\n\t\tconsole.log(filteredWish);\n\n\t\t// turn this into an array\n\n\t\tconst wordArray = filteredWish.split(' ');\n\t\t// console.log(wordArray);\n\n\t\t// take the first value of the array [0] and save it to state\n\n\t\tconst userKeyWord = wordArray[0];\n\t\tconsole.log(userKeyWord);\n\n\t\t// run it through the API Call to get contextual advice\n\n\t\taxios({\n\t\t\turl: `https://api.adviceslip.com/advice/search/${userKeyWord}`,\n\t\t\tmethod: `GET`,\n\t\t\tdataResponse: `json`\n\t\t}).then(answer => {\n\t\t\tconsole.log(answer);\n\n\t\t\t// console.log(answer.data.message);\n\n\t\t\tif (typeof answer.data.message === 'undefined') {\n\t\t\t\tthis.setState(\n\t\t\t\t\t{\n\t\t\t\t\t\tadvice: [...this.state.advice, answer.data.slips[0].advice],\n\t\t\t\t\t\tadvice: answer.data.slips[0].advice\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconsole.log(this.state.advice);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconsole.log(this.state.advice);\n\t\t\t}\n\t\t});\n\t};\n\n\tcomponentDidMount() {\n\t\t// on mount, make an API call, get a random piece of advice and store in state, just in case the user's keyword query doesn't return any result\n\n\t\taxios({\n\t\t\turl: `https://api.adviceslip.com/advice`,\n\t\t\tmethod: `GET`,\n\t\t\tdataResponse: `json`\n\t\t})\n\t\t\t.then(answer => {\n\t\t\t\tconsole.log(answer);\n\n\t\t\t\tconst randomAdvice = answer.data.slip.advice;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tadvice: randomAdvice\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tconsole.log('error');\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n      <Router>\n        <div className=\"App\">\n          <Route\n            exact\n            path=\"/\"\n            component={() => (\n              <LandingPage\n                handleSubmit={this.handleSubmit}\n                handleChange={this.handleChange}\n              />\n            )}\n          />\n          <Route path=\"/maze\" component={Maze} />\n          <Route path=\"/maze\" component={Maze} />\n        </div>\n      </Router>\n    );\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}